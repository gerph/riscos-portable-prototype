<?xml version="1.0"?>
<!DOCTYPE riscos-prm PUBLIC "-//Gerph//DTD PRM documentation 1.02//EN"
                            "http://www.movspclr.co.uk/dtd/102/prm.dtd">

<riscos-prm>

<!-- Document declares itself as RISC OS PRMs: Volume 4: Chapter 80: The Portable module -->

<chapter title="The Portable module">

<section title="Introduction">

<p>This module provides support for portable machines. The SWIs listed are
not normally intended to be issued from user programs, they will normally be
issued by other modules in the system.

<fixme> Missing details of the PortableBMU event</fixme>

</p>
</section>


<section title="Technical details">

<subsection title="A4 portable details">
<subsubsection title="Colour to grey-scale mapping">

<p>The Portable module has to convert the users RGB palette settings into a
grey-scale value in the range 0 to 14 (since the LCD panel only supports 15
unique grey levels). It does this using the following algorithm:</p>

<p>Luminance = (4 &times; Green) + (2 &times; Red) + Blue</p>

<p>Red, Green and Blue are in the range 0 to 255, so the luminance is in the
range 0 to 1785 (255 &times; 7). It is then mapped down onto the range 0 to
14 using the following table:</p>

<p>
<value-table head-number="Luminance" head-name="Grey level"
             head-value="Palette values for R, G and B">
<value number="0 - 118" name="0">&hex;00</value>
<value number="119 - 237" name="1">&hex;12</value>
<value number="238 - 356" name="2">&hex;24</value>
<value number="357 - 475" name="3">&hex;37</value>
<value number="476 - 594" name="4">&hex;49</value>
<value number="595 - 713" name="5">&hex;5B</value>
<value number="714 - 832" name="6">&hex;6D</value>
<value number="833 - 952" name="7">&hex;7F</value>
<value number="953 - 1071" name="8">&hex;92</value>
<value number="1072 - 1190" name="9">&hex;A4</value>
<value number="1191 - 1309" name="10">&hex;B6</value>
<value number="1310 - 1428" name="11">&hex;C8</value>
<value number="1429 - 1547" name="12">&hex;DB</value>
<value number="1548 - 1666" name="13">&hex;ED</value>
<value number="1667 - 1785" name="14">&hex;FF</value>
</value-table>
</p>

<p>The mapping table above is provided for information only, and may be
subject to change in later versions of the Portable module.</p>

<p>In 256 colour modes the colour mapping is partly determined by the
hardware, since the top 4 bits of the pixel value go directly to particular
bits of the three guns, and the LCD ASIC only takes input from VIDC's red
output. Thus the grey level will not in general map correctly from the
luminance of the RGB value which would normally be output.</p>

</subsubsection>
</subsection>
</section>


<section title="Service calls">

<service-definition name="Portable"
                    number="8A"
                    description="Portable state change request, or information"
                    >
<entry>
<register-use number="1">Reason code (&hex;8A)</register-use>
<register-use number="2">Sub-reason code :
 <value-table>
  <value number="0">
   <reference type="service" name="Portable" reason="0" use-description="yes" />
  </value>

  <value number="1">
   <reference type="service" name="Portable" reason="1" use-description="yes" />
  </value>

  <value number="2">Tidy up</value>

  <value number="3">
   <reference type="service" name="Portable" reason="3" use-description="yes" />
  </value>

  <value number="4">
   <reference type="service" name="Portable" reason="4" use-description="yes" />
  </value>

  <value number="5">
   <reference type="service" name="Portable" reason="5" use-description="yes" />
  </value>

  <value number="other">Reserved for future expansion</value>

 </value-table>
</register-use>

<register-use number="3">bit mask of which ports are being powered down (if
R2 = 0) (each bit set indicates port is being powered down)<br />
or bit mask of which ports have been powered up (if R2 = 1) (each bit set
indicates port has been powered up)

</register-use>
</entry>

<exit>
<register-use number="1">0 if R3 = 0, else preserved to pass on</register-use>
<register-use number="2" state="preserved" />
<register-use number="3">bit mask of which ports may be powered down or up
(each bit set indicates no objection to change of state)
</register-use>

</exit>

<use>
<p>This call is issued before power is removed or after power is reapplied
to the following:</p>

<p>
<list>
<item><p>Econet (bit 0)</p></item>
<item><p>serial buffer/oscillator (bit 3)</p></item>
<item><p>FDC oscillator (bit 14)</p></item>
</list>
</p>

<p>If a module wishes to prevent hardware being powered down, it should
clear the appropriate bit or bits in R3. In addition, if the resulting value
in R3 is now zero, the module should claim the service by setting R1 to
zero. (This is to prevent the call being unnecessarily passed round the rest
of the modules). Otherwise the service should be passed on by preserving
R1.</p>

<p>This service call should never be claimed.</p>

</use>
<related>
</related>
</service-definition>

<service-definition name="Portable"
                    number="8A"
                    reason="0"
                    reasonname="PowerDown"
                    description="Hardware is about to be powered down"
                    >
<entry>
<register-use number="1">reason code (&hex;8A)</register-use>
<register-use number="2">Sub-reason code (0)</register-use>

<register-use number="3">bit mask of which ports are being powered down
(each bit set indicates port is being powered down)</register-use>

</entry>

<exit>
<register-use number="1">0 if R3 = 0, else preserved to pass on</register-use>
<register-use number="2" state="preserved" />
<register-use number="3">bit mask of which ports may be powered down
(each bit set indicates no objection to change of state)
</register-use>

</exit>

<use>
<p>This call is issued before power is removed from the following:</p>

<p>
<list>
<item><p>Econet (bit 0)</p></item>
<item><p>serial buffer/oscillator (bit 3)</p></item>
<item><p>FDC oscillator (bit 14)</p></item>
</list>
</p>

<p>If a module wishes to prevent hardware being powered down, it should
clear the appropriate bit or bits in R3. In addition, if the resulting value
in R3 is now zero, the module should claim the service by setting R1 to
zero. (This is to prevent the call being unnecessarily passed round the rest
of the modules). Otherwise the service should be passed on by preserving
R1.</p>

<p>This service call should never be claimed.</p>

</use>
<related>
<reference type="service" name="Portable" reason="1" />
</related>
</service-definition>

<service-definition name="Portable"
                    number="8A"
                    reason="1"
                    reasonname="PowerUp"
                    description="Hardware has been powered up"
                >
<entry>
<register-use number="1">reason code (&hex;8A)</register-use>
<register-use number="2">Sub-reason code (1)</register-use>

<register-use number="3">bit mask of which ports have been powered up
(each bit set indicates port has been powered up)</register-use>

</entry>

<exit>
<register-use number="1">0 if R3 = 0, else preserved to pass on</register-use>
<register-use number="2" state="preserved" />
<register-use number="3" state="preserved" />
</exit>

<use>
<p>This call is issued after power is reapplied to the following:</p>

<p>
<list>
<item><p>Econet (bit 0)</p></item>
<item><p>serial buffer/oscillator (bit 3)</p></item>
<item><p>FDC oscillator (bit 14)</p></item>
</list>
</p>

<p>The service should be passed on by preserving R1.</p>

</use>
<related>
<reference type="service" name="Portable" reason="0" />
</related>
</service-definition>

<service-definition name="Portable"
                    number="8A"
                    reason="3"
                    reasonname="Freeze"
                    description="Device is about to enter a stopped state (frozen)"
                    >
<entry>
<register-use number="1">reason code (&hex;8A)</register-use>
<register-use number="2">Sub-reason code (3)</register-use>

</entry>

<exit>
<register-use number="1" state="preserved" />
<register-use number="2" state="preserved" />
</exit>

<use>
<p>This call is issued before the device is put into a stopped
mode where the CPU core has been disabled. RAM continues to be
refreshed and the system will probably be woken up at some future
point. It is possible that the power may fail on the device before
it is awakened. In such cases, the device may next be activated
from a hard reset condition.</p>

</use>
<related>
<reference type="service" name="Portable" reason="4" />
<reference type="service" name="Portable" reason="5" />
</related>
</service-definition>

<service-definition name="Portable"
                    number="8A"
                    reason="4"
                    reasonname="Unfreeze"
                    description="Device has left stopped state (awakened)"
                >
<entry>
<register-use number="1">reason code (&hex;8A)</register-use>
<register-use number="2">Sub-reason code (4)</register-use>
<register-use number="3">Failure code:
 <value-table>
  <value number="0">Freeze was successful and has now returned</value>
  <value number="1">Freeze failed to halt IDE devices</value>
  <value number="2">Freeze failed to halt sound system</value>
  <value number="3">Freeze failed to halt display</value>
  <value number="4">Freeze failed to halt other devices (FDC, Econet, etc)</value>
  <value number="5">Freeze failed to halt some device</value>
  <value number="6">Freeze failed to enter the suspend state</value>
  <value number="other">Reserved failure states for future expansion</value>
 </value-table>
</register-use>

</entry>

<exit>
<register-use number="1" state="preserved" />
<register-use number="2" state="preserved" />
<register-use number="3" state="preserved" />
</exit>

<use>
<p>This call is issued after the device returns from a stopped state.
It may never have physically stopped the CPU if some part of the system
failed to be shut down. In such cases, it may not be necessary to fully
resynchronise the environment - for example, network connections may
still be active.</p>

</use>
<related>
<reference type="service" name="Portable" reason="3" />
<reference type="service" name="Portable" reason="5" />
</related>
</service-definition>

<service-definition name="Portable"
                    number="8A"
                    reason="5"
                    reasonname="FreezeRequest"
                    description="Device wishes to be stopped (frozen)"
                >
<entry>
<register-use number="1">reason code (&hex;8A)</register-use>
<register-use number="2">Sub-reason code (5)</register-use>
</entry>

<exit>
<register-use number="1">0 if call is being claimed to prevent freeze,
                         preserved to accept freeze</register-use>
<register-use number="2" state="preserved" />
</exit>

<use>
<p>This call is issued before the device is stop. Any after the
device wishing to object to the request may claim the service.</p>

</use>
<related>
<reference type="service" name="Portable" reason="3" />
<reference type="service" name="Portable" reason="4" />
</related>
</service-definition>

</section>


<section title="SWI Calls">

<swi-definition name="Portable_Speed"
                number="42FC0"
                description="Controls the processor speed"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >
<entry>
<register-use number="0">EOR mask</register-use>
<register-use number="1">AND mask</register-use>
</entry>

<exit>
<register-use number="0">old speed</register-use>
<register-use number="1">new speed :
 <value-table>
  <value number="0">Fast</value>
  <value number="1">Slow</value>
 </value-table>
</register-use>
</exit>

<use>
<p>This SWI controls the processor speed, which is reduced when the system
is idle in order to save power.</p>

<p>The new speed is calculated as follows:</p>

<p>new speed = (old speed AND R1) EOR R0</p>

<p>Speed settings currently supported are:</p>

<p>
<value-table>
 <value number="0">fast</value>
 <value number="1">slow</value>
</value-table>
</p>
</use>

<related>
<reference type="swi" name="Portable_Control" />
</related>
</swi-definition>


<swi-definition name="Portable_Control"
                number="42FC1"
                description="Controls various power control and miscellaneous bits"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >
<entry>
<register-use number="0">EOR mask</register-use>
<register-use number="1">AND mask</register-use>
</entry>

<exit>
<register-use number="0">old control</register-use>
<register-use number="1">new control</register-use>
</exit>

<use>
<p>This SWI controls various power control and miscellaneous bits in the
portable machine.</p>

<p>The new control is calculated as follows:</p>

<p>new control = (old control AND R1) EOR R0</p>

<p>The bits in control are as follows:</p>

<p>
<bitfield-table>
 <bit number="0">Power to Econet enabled</bit>
 <bit number="1">Power to LCD display enabled</bit>
 <bit number="2">Power to external video display enabled</bit>
 <bit number="3">Power to serial buffer and oscillator enabled</bit>
 <bit number="4">Dual panel mode enabled</bit>
 <bit number="5, 6">Video clock control :
  <value-table>
   <value number="0">External clock input</value>
   <value number="1">Crystal oscillator, divided by 2</value>
   <value number="2">Crystal oscillator</value>
   <value number="3">reserved, do not use</value>
  </value-table>
 </bit>
 <bit number="7">Invert video clock</bit>
 <bit number="8">Back-light enabled</bit>
 <bit number="9" state="set">2 extra lines on display</bit>
 <bit number="9" state="clear">1 extra line on display</bit>
 <bit number="10" state="set">2 DRAMs used for dual panel</bit>
 <bit number="10" state="clear">1 DRAM used for dual panel</bit>
 <bit number="11 - 13">Reserved</bit>
 <bit number="14">Power to FDC oscillator enabled</bit>
 <bit number="15">Reserved</bit>
 <bit number="16">LCD palette set up for inverse video</bit>
 <bit number="17">Internal tracker ball enabled</bit>
 <bit number="18">External mouse enabled</bit>
 <bit number="19">Power to external keyboard and mouse enabled</bit>
 <bit number="20 - 31">Reserved</bit>
</bitfield-table>
</p>

<p>Reserved bits must not be modified, nor assumed to read any particular
value.</p>

<p>Note that the 82C711 has one oscillator which is used by the serial
subunit and by the floppy disc controller (FDC). Power to the oscillator is
removed only if bits 3 and 14 are both clear.</p>

<p>On some computers the power to the oscillator cannot be removed because
the same oscillator drives other parts of the system (eg IOEB).</p>

<p>If this call results in bits 0, 3 or 14 changing (ie power being removed
or applied to the serial buffer/oscillator, Econet or FDC oscillator), then
Service_Portable is issued (see
<reference type="service" name="Portable" reason="0" /> and
<reference type="service" name="Portable" reason="1" />).</p>

</use>

<related>
<reference type="swi" name="Portable_Speed" />
</related>
</swi-definition>



<swi-definition name="Portable_ReadBMUVariable"
                number="42FC2"
                description="Reads Battery Management Unit variables"
                irqs="enabled except if R0 = 10"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >
<entry>
<register-use number="0">BMU variable number</register-use>
</entry>

<exit>
<register-use number="0" state="preserved" />
<register-use number="1">value of variable</register-use>
</exit>

<use>
<p>This SWI reads Battery Management Unit variables. Any variable which is
not supported will return an error.</p>

<p>The BMU variable numbers are:</p>

<p>
<value-table head-number="Variable" head-name="Read/Write" head-value="Description">
 <value number="0" name="R">version number and memory map of BMU microcode</value>
 <value number="1" name="R">nominal battery capacity</value>
 <value number="2" name="R">measured battery capacity</value>
 <value number="3" name="R">used battery capacity</value>
 <value number="4" name="R">usable battery capacity</value>
 <value number="5" name="R">reserved</value>
 <value number="6" name="R/W">charge estimate</value>
 <value number="7" name="R">instantaneous voltage</value>
 <value number="8" name="R">instantaneous current</value>
 <value number="9" name="R">instantaneous temperature</value>
 <value number="10" name="R">flags as follows:
  <bitfield-table>
   <bit number="0">battery has been replaced</bit>
   <bit number="1">lid is open</bit>
   <bit number="2">threshold 2 reached (battery is flat)</bit>
   <bit number="3">threshold 1 reached (battery is low)</bit>
   <bit number="4">charging system fault</bit>
   <bit number="5">charge state is known</bit>
   <bit number="6">battery present (set when battery is present, whether in use, charging or idle)</bit>
   <bit number="7">power connected (set when external power is available, whether charging or not)</bit>
   <bit number="8">battery charging (set when external power is being used to charge the battery)</bit>
   <bit number="9">battery failing (set when the battery has been detected as aging and no longer holding charge)</bit>
  </bitfield-table>
 </value>
 <value number="11" name="R">charge rate (bits 4 to 7)</value>
 <!-- Start stork bits -->
 <value number="12" name="R">charge current</value>
 <value number="13" name="R">discharge current</value>
 <value number="14" name="R">voltage</value>
 <value number="15" name="R">temperature 1</value>
 <value number="16" name="R">temperature 2</value>
 <value number="17" name="R">charge level</value>
 <value number="18" name="R">status flags (as variable 10)</value>
 <value number="19" name="R">input signals</value>
 <value number="20" name="R">battery capacity</value>
 <!-- Start VRPC bits -->
 <value number="21" name="R">battery time remaining in seconds</value>
 <value number="22" name="R">maximum battery life in seconds</value>
</value-table>
</p>

<p>Reading any variable except the flags (variable 10) will enable IRQs (the
flags are read from a soft copy).</p>

<p>Variables 0-11 were implemented within the A4 version of the Portable
module. Variables 12-20 and selected variables from 0-11 were implemented
within the Stork version of the Portable module. Variables 21-22 are
implemented within the Virtual RiscPC version of the Portable module.
</p>

<p>Variables which are not supported will return with the V flag set and R0
point to a standard error block. Applications trying to use the more
advanced features and finding they are not available should attempt to fall
back to earlier methods.</p>

</use>

<related>
<reference type="swi" name="Portable_WriteBMUVariable" />
</related>
</swi-definition>


<swi-definition name="Portable_WriteBMUVariable"
                number="42FC3"
                description="Writes Battery Management Unit variables"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >
<entry>
<register-use number="0">BMU variable number</register-use>
<register-use number="1">new value of variable</register-use>
</entry>

<exit>
<register-use number="0" state="preserved" />
<register-use number="1" state="preserved" />
</exit>

<use>
<p>This SWI writes Battery Management Unit variables.</p> <p>The variable
numbers are as for <reference type="swi" name="Portable_ReadBMUVariable" />.
Variables not marked with a 'W' should not be written.</p>
</use>

<related>
<reference type="swi" name="Portable_ReadBMUVariable" />
</related>
</swi-definition>


<swi-definition name="Portable_CommandBMU"
                number="42FC4"
                description="Issues a command to the Battery Management Unit"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >

<entry>
<register-use number="0">reason code
 <value-table>
  <value number="1">Remove power</value>
  <value number="2">Reserved</value>
  <value number="3">Reserved</value>
  <value number="4">Set autostart (R1 = delay in minutes - 1; eg 0 for a 1 minute delay</value>
  <value number="5">Turn off AC power</value>
  <value number="6">Turn on AC power</value>
  <value number="7">Disable power management status</value>
 </value-table>
</register-use>
<register-use number="0-5">Dependant on reason code</register-use>
</entry>

<exit>
<register-use number="0-5" state="preserved" />
</exit>

<use>
<p>This SWI issues a command to the Battery Management Unit. The values of
variables after a command may not change immediately after this command is
issued.</p>
</use>

<related>
</related>
</swi-definition>


<swi-definition name="Portable_ReadFeatures"
                number="42FC5"
                description="Read feature set of the portable module"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >
<entry>
</entry>

<exit>
<register-use number="1">Features of the portable module :
 <bitfield-table>
  <bit number="0">Portable_Speed SWI is implemented</bit>
  <bit number="1-3" state="reserved" />
  <bit number="4">Portable_Idle SWI is implemented</bit>
  <bit number="5">Portable_Stop SWI is implemented</bit>
  <bit number="6-31" state="reserved" />
 </bitfield-table>
</register-use>
</exit>

<use>
<p>This SWI is used to read the features provided by the Portable module.
Where this module is not present, or this SWI generates an error if called,
clients should treat the features as being 0.</p>

</use>

<related>
</related>
</swi-definition>


<swi-definition name="Portable_Idle"
                number="42FC6"
                description="Informs the portable module that the system is currently idle"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >

<entry>
</entry>

<exit>
</exit>

<use>
<p>This SWI places the system into idle mode. The CPU clock is stopped, but
all other clocks run normally. This means the Video display and all the IO
channels are active, the DRAM is refreshed, but the system consumes less
power as the CPU is inactive. The CPU remains in this state until it
receives a FIQ or IRQ interrupt (eg from the keyboard, floppy, centi-second
timer etc).</p>

<p>Essentially it requests that the environment be stopped until 'something
interesting' happens.</p>

</use>

<related>
</related>
</swi-definition>


<swi-definition name="Portable_Stop"
                number="42FC7"
                description="Stops (freezes) the Portable"
                irqs="disabled"
                fiqs="disabled"
                processor-mode="SVC"
                re-entrant="no"
                >

<entry>
</entry>

<exit>
<register-use number="0">Reason for wake up :
 <value-table>
  <value number="1">Keyboard interrupt</value>
  <value number="2">RTC timer interrupt</value>
  <value number="other">Reserved</value>
 </value-table>
</register-use>
</exit>

<use>

<p>This SWI places the machine into a 'standby' state, from which it can be
awoken by certain interrupts. DRAM is set to self-refresh, and the system
placed into stop mode (all clocks are stopped). Execution continues only
on receipt of an external wakeup event from the keyboard or
real-time-clock. Normal FIQ or IRQ or centi-second timer events cannot
happen because the IO system is not clocked.</p>

<p>Freezing of the machine may be prevented by modules through the service
call <reference type="service" name="Portable" reason="5" />.
This service is issued prior to attempts to freeze the machine. If no clients
object to this service,
<reference type="service" name="Portable" reason="3" /> will be issued
and the machine shut down. Upon an interrupt,
<reference type="service" name="Portable" reason="4" /> will be
issued to notify clients that the power has been restored and a
period of time has elapsed during which interrupts have not happened.
</p>

</use>

<related>
</related>
</swi-definition>


<swi-definition name="Portable_Status"
                number="42FC8"
                description="Reads the status of the Portable environment"
                irqs="undefined"
                fiqs="enabled"
                processor-mode="SVC"
                re-entrant="no"
                >

<entry>
</entry>

<exit>
<register-use number="0">Status of the Portable environment :
 <bitfield-table>
  <bit number="0">Device is currently docked</bit>
  <bit number="1">Device has external floppy disc drive connected</bit>
  <bit number="2">Device has tracker ball connected (rather than mouse)</bit>
  <bit number="3">Device has internal display in use</bit>
  <bit number="4-31" state="reserved" />
 </bitfield-table>
</register-use>
</exit>

<use>
<p>This SWI is used to read the status of the Portable environment. This
allows applications to modify their behaviour, or for modules to configure
their operations based on the environment in which the device is
situated.</p>
</use>

<related>
</related>
</swi-definition>
</section>


</chapter>

<!-- MetaData -->
<meta>
 <maintainer>
  <email name="RISCOS Ltd" address="developer@riscos.com" />
 </maintainer>
 <disclaimer>
  <import document="http://www.riscos.com/prm/prm-disclaimer.xml" path="root/*" />
 </disclaimer>

 <history>
  <revision number="1" date="02 May 2003" author="ROL" title="Converted from PRM" />
  <revision number="2" date="01 Sep 2003" author="ROL" title="Tided up">
   <change>Updated bit fields to be more readable.</change>
   <change>Reformatted some of the text to be more readable.</change>
  </revision>
  <revision number="3" date="02 Sep 2003" author="ROL" title="Updated with Stork details">
   <change>SWIs ReadFeatures, Idle, Stop and Status documented.</change>
   <change>Service_Portable expanded to cover reasons 2-5.</change>
  </revision>
  <revision number="4" date="02 Sep 2003" author="ROL" title="BMU variables updated">
   <change>BMU variables specific to Stork have now been added.</change>
  </revision>
  <revision number="5" date="12 Mar 2004" author="ROL" title="Tidy up">
   <change>Miscellaneous tidy up of the documentation.</change>
   <change>Corrected grey scale values.</change>
   <change>Added note about missing Portable Event details (pending Event vector documentation).</change>
  </revision>
 </history>
</meta>
</riscos-prm>

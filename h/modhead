/* Generated by CMunge 0.78 (17 Dec 2021)
 * CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher */

#ifndef _CMUNGE_Portable_H_
#define _CMUNGE_Portable_H_

#include "kernel.h"

#define CMUNGE_VERSION (78)
#define CMHG_VERSION   (531) /* Nearest equivalent version */

#define Module_Title		"Portable"
#define Module_Help		"Portable"
#define Module_VersionString	"0.02"
#define Module_VersionNumber	2
#ifndef Module_Date
#define Module_Date		"06 Feb 2022"
#endif
#define Module_MessagesFile	"Resources:$.Resources.Portable.Messages"

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     Mod_Init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *Mod_Init(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     Mod_Final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return 0 for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *Mod_Final(int fatal, int podule_base, void *pw);


/***************************************************************************
 * Description:  SWI handler routine. All SWIs for this module will be
 *               passed to these routines.
 * Parameters:   number = SWI number within SWI chunk (i.e. 0 to 63)
 *               r      = pointer to register block on entry
 *               pw     = private word for module
 * On exit:      Return NULL if SWI handled sucessfully, setting return
 *               register values (r0-r9) in r.
 *               Return error_BAD_SWI for out of range SWIs.
 *               Return an error block for a custom error.
 **************************************************************************/
/* Functions called to handle particular SWI calls */
_kernel_oserror *SWI_Speed(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_Control(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_BMUVariable(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_BMUVariable(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_CommandBMU(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_ReadFeatures(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_Idle(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_Stop(int number, _kernel_swi_regs *r, void *pw);
_kernel_oserror *SWI_Status(int number, _kernel_swi_regs *r, void *pw);
/* SWI number definitions */
#define Portable_00 (0x00042fc0)
#undef Portable_Speed
#undef XPortable_Speed
#define Portable_Speed            (0x00042fc0)
#define XPortable_Speed           (0x00062fc0)
#undef Portable_Control
#undef XPortable_Control
#define Portable_Control          (0x00042fc1)
#define XPortable_Control         (0x00062fc1)
#undef Portable_ReadBMUVariable
#undef XPortable_ReadBMUVariable
#define Portable_ReadBMUVariable  (0x00042fc2)
#define XPortable_ReadBMUVariable (0x00062fc2)
#undef Portable_WriteBMUVariable
#undef XPortable_WriteBMUVariable
#define Portable_WriteBMUVariable  (0x00042fc3)
#define XPortable_WriteBMUVariable (0x00062fc3)
#undef Portable_CommandBMU
#undef XPortable_CommandBMU
#define Portable_CommandBMU       (0x00042fc4)
#define XPortable_CommandBMU      (0x00062fc4)
#undef Portable_ReadFeatures
#undef XPortable_ReadFeatures
#define Portable_ReadFeatures     (0x00042fc5)
#define XPortable_ReadFeatures    (0x00062fc5)
#undef Portable_Idle
#undef XPortable_Idle
#define Portable_Idle             (0x00042fc6)
#define XPortable_Idle            (0x00062fc6)
#undef Portable_Stop
#undef XPortable_Stop
#define Portable_Stop             (0x00042fc7)
#define XPortable_Stop            (0x00062fc7)
#undef Portable_Status
#undef XPortable_Status
#define Portable_Status           (0x00042fc8)
#define XPortable_Status          (0x00062fc8)

/* Special error for 'SWI values out of range for this module' */
#define error_BAD_SWI ((_kernel_oserror *) -1)

/* Error base for this module */
#define ERROR_BASE (0x00000b40)
/* Error messages embedded in header, based at &b40 */
extern void __err_err_BadHardware(void); /* &603 */
extern void __err_err_BadBMUVariable(void); /* &b40 */
extern void __err_err_BadBMUCommand(void); /* &b41 */
extern void __err_err_BMUBusy(void); /* &b42 */
extern void __err_err_BadBMUVersion(void); /* &b43 */
extern void __err_err_BMUFault(void); /* &b44 */
extern void __err_err_BMUVecClaim(void); /* &b45 */
extern void __err_err_CantFreeze(void); /* &b46 */
extern void __err_err_FreezeFailed(void); /* &b47 */
extern void __err_err_BMUCannotReadVariable(void); /* &b48 */
extern void __err_err_BMUCannotWriteVariable(void); /* &b49 */
extern void __err_err_BMUValueNotValid(void); /* &b4a */
extern void __err_err_BMUChangeFailed(void); /* &b4b */
#define err_BadHardware ((_kernel_oserror*)(int)__err_err_BadHardware)
#define err_BadBMUVariable ((_kernel_oserror*)(int)__err_err_BadBMUVariable)
#define err_BadBMUCommand ((_kernel_oserror*)(int)__err_err_BadBMUCommand)
#define err_BMUBusy ((_kernel_oserror*)(int)__err_err_BMUBusy)
#define err_BadBMUVersion ((_kernel_oserror*)(int)__err_err_BadBMUVersion)
#define err_BMUFault ((_kernel_oserror*)(int)__err_err_BMUFault)
#define err_BMUVecClaim ((_kernel_oserror*)(int)__err_err_BMUVecClaim)
#define err_CantFreeze ((_kernel_oserror*)(int)__err_err_CantFreeze)
#define err_FreezeFailed ((_kernel_oserror*)(int)__err_err_FreezeFailed)
#define err_BMUCannotReadVariable ((_kernel_oserror*)(int)__err_err_BMUCannotReadVariable)
#define err_BMUCannotWriteVariable ((_kernel_oserror*)(int)__err_err_BMUCannotWriteVariable)
#define err_BMUValueNotValid ((_kernel_oserror*)(int)__err_err_BMUValueNotValid)
#define err_BMUChangeFailed ((_kernel_oserror*)(int)__err_err_BMUChangeFailed)

#ifdef __cplusplus
}
#endif

#endif
